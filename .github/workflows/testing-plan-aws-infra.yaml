name: TESTING Plan AWS infrastructure

on:
  pull_request:
    branches: [main]
  workflow_dispatch:

defaults:
  run:
    working-directory: ./scripts

env:
  PR_NUMBER: ${{ github.event.pull_request.number }}

jobs:
  plan-infra:
    runs-on: ubuntu-latest
    environment: testing
    steps:
      - uses: actions/checkout@v2

      - name: Init AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ vars.TF_VAR_REGION }}

      - name: Set up testing environment variables
        run: |
          echo "name=\"${{ env.PR_NUMBER }}\"
          region=\"${{ vars.TF_VAR_REGION }}\"
          k8s_version=\"${{ vars.TF_VAR_K8S_VERSION }}\"
          k8s_instance_type=\"${{ vars.TF_VAR_K8S_INSTANCE_TYPE }}\"
          k8s_node_count=\"${{ vars.TF_VAR_K8S_NODE_COUNT }}\"
          k8s_node_min_count=\"${{ vars.TF_VAR_K8S_NODE_MIN_COUNT }}\"
          k8s_node_max_count=\"${{ vars.TF_VAR_K8S_NODE_MAX_COUNT }}\"
          backup_retention_period=\"${{ vars.TF_VAR_BACKUP_RETENTION_PERIOD }}\"
          falkordb_version=\"v4.0.3\"
          falkordb_cpu=\"${{ vars.TF_VAR_FALKORDB_CPU }}\"
          falkordb_memory=\"${{ vars.TF_VAR_FALKORDB_MEMORY }}\"
          persistance_size=\"${{ vars.TF_VAR_PERSISTANCE_SIZE }}\"
          falkordb_replicas=\"${{ vars.TF_VAR_FALKORDB_REPLICAS }}\"
          grafana_admin_password=\"${{ vars.TF_VAR_GRAFANA_ADMIN_PASSWORD }}\"
          backup_schedule=\"${{ vars.TF_VAR_BACKUP_SCHEDULE }}\"
          falkordb_domain=\"${{ vars.TF_VAR_FALKORDB_DOMAIN }}\"
          falkordb_hosted_zone_id=\"${{ vars.TF_VAR_FALKORDB_HOSTED_ZONE_ID }}\"
          falkordb_password=\"${{ secrets.TF_VAR_FALKORDB_PASSWORD }}\"
          " >> ../tofu/terraform.tfvars

      - name: Set up Tofu
        uses: opentofu/setup-opentofu@v1.0.1

      - name: Init infrastructure
        run: ./tofu_init.sh

      - name: Run tests
        run: ./tofu_test.sh

      - name: Plan AWS module
        id: plan_aws
        run: |
          ./tofu_plan_aws.sh 
          summary=$(cd ../tofu && tofu show local-aws)
          echo "$summary\n\n" > ${GITHUB_WORKSPACE}/plan-aws.out

      - name: Plan K8S module
        id: plan_k8s
        run: |
          ./tofu_plan_k8s.sh 
          summary=$(cd ../tofu && tofu show local-k8s)
          echo "$summary\n\n" > ${GITHUB_WORKSPACE}/plan-k8s.out

      - name: Add comment with state
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const run_url = process.env.GITHUB_SERVER_URL + '/' + process.env.GITHUB_REPOSITORY + '/actions/runs/' + process.env.GITHUB_RUN_ID
            const run_link = '<a href="' + run_url + '">Actions</a>.'
            const fs = require('fs')
            const plan_aws_file = fs.readFileSync('plan-aws.out', 'utf8')
            const plan_k8s_file = fs.readFileSync('plan-k8s.out', 'utf8')
         
            const title = '#### Tofu Plan ðŸ“–'

            const output = `
            ${title}
            
            <details><summary>Aws Plan</summary>
            
            \`\`\`\n
            ${plan_aws_file}
            \`\`\`
            
            </details>
            
            <details><summary>K8S Plan</summary>
            
            \`\`\`\n
            ${plan_k8s_file}
            \`\`\`
            
            </details>

            `

            // Update a comment if it exists, otherwise create a new one

            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            })

            const comment = comments.data.find(comment => comment.user.login === 'github-actions[bot]' && comment.body.startsWith(title))

            if (comment) {
              await github.rest.issues.updateComment({
                comment_id: comment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
              return
            }

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          


      - name: Archive aws module state file
        uses: actions/upload-artifact@v4
        with:
          name: state-aws-${{ env.PR_NUMBER }}
          path: tofu/local-aws

      - name: Archive k8s module state file
        uses: actions/upload-artifact@v4
        with:
          name: state-k8s-${{ env.PR_NUMBER }}
          path: tofu/local-k8s

      - name: Archive environment file
        uses: actions/upload-artifact@v4
        with:
          name: environment-${{ env.PR_NUMBER }}
          path: tofu/terraform.tfvars
