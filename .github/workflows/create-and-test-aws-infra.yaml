name: Create and Test AWS infrastructure

on:
  # push:
  #   branches: [main]
  # pull_request:
  #   branches: [main]
  workflow_dispatch:

defaults:
  run:
    working-directory: ./scripts

jobs:
  plan-infra:
    runs-on: ubuntu-latest
    environment: testing
    steps:
      - uses: actions/checkout@v2

      - name: Init AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ vars.REGION }}

      - name: Set up testing environment variables
        run: |
          name="${{ github.run_id }}",
          region="${{ vars.REGION }}"
          k8s_version="${{ vars.K8S_VERSION }}"
          k8s_instance_type="${{ vars.K8S_INSTANCE_TYPE }}"
          k8s_node_count="${{ vars.K8S_NODE_COUNT }}" 
          k8s_node_min_count="${{ vars.K8S_NODE_MIN_COUNT }}"
          k8s_node_max_count="${{ vars.K8S_NODE_MAX_COUNT }}"
          backup_retention_period="${{ vars.BACKUP_RETENTION_PERIOD }}"
          falkordb_version="${{ vars.FALKORDB_VERSION }}"
          falkordb_cpu="${{ vars.FALKORDB_CPU }}"
          falkordb_memory="${{ vars.FALKORDB_MEMORY }}"
          persistance_size="${{ vars.PERSISTANCE_SIZE }}"
          falkordb_replicas="${{ vars.FALKORDB_REPLICAS }}"
          grafana_admin_password="${{ vars.GRAFANA_ADMIN_PASSWORD }}"
          backup_schedule="${{ vars.BACKUP_SCHEDULE }}"
          falkordb_domain="${{ vars.FALKORDB_DOMAIN }}"
          falkordb_hosted_zone_id="${{ vars.FALKORDB_HOSTED_ZONE_ID }}"
          " >> ../tofu/terraform.tfvars

      - name: Set up Tofu
        uses: opentofu/setup-opentofu@v1.0.1

      - name: Init infrastructure
        run: ./tofu_init.sh

      - name: Run tests
        run: ./tofu_test.sh

      - name: Plan infrastructure
        id: plan
        run: |
          ./tofu_plan.sh
          echo "::set-output name=summary::$(./tofu_show.sh)" 

      - name: Wait for approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: AviAvni
          minimum-approvals: 1
          issue-title: '[TESTING] Terraform plan for ${{ github.run_id }}'
          issue-body: 'Please review the terraform plan for ${{ github.run_id }}:
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

            Plan:
            ${{ steps.plan.outputs.summary }}'
          exclude-workflow-initiator-as-approver: false
          additional-approved-words: ''
          additional-denied-words: ''

      - name: Apply infrastructure
        id: apply_infrastructure
        run: ./tofu_apply.sh -- -auto-approve -state-out=testing_state_${{ github.run_id }}.tfstate
        timeout-minutes: 20
        continue-on-error: true

      - name: Archive state file
        uses: actions/upload-artifact@v4
        with:
          name: state-${{ github.run_id }}
          path: ../tofu/testing_state_${{ github.run_id }}.tfstate

      - name: Archive environment file
        uses: actions/upload-artifact@v4
        with:
          name: environment-${{ github.run_id }}
          path: ../tofu/terraform.tfvars
  
      - name: Get load balancer hostname
        if: steps.apply_infrastructure.outcome == 'success'
        id: get_lb_hostname
        run: |
          echo "::set-output name=host::$(./tofu_output.sh | grep lb_hostname | awk '{print $3}')"

      - name: Run python tests
        if: steps.apply_infrastructure.outcome == 'success'
        continue-on-error: true
        working-directory: ./
        run: |
          FALKORDB_HOST=${{ steps.get_lb_hostname.outputs.host }}
          FALKORDB_PORT=6379
          python3 -m venv .venv
          source .venv/bin/activate
          pip install -r requirements.txt
          pytest

      - name: Destroy infrastructure
        if: always()
        run: ./tofu_destroy.sh
