name: TESTING Apply AWS infrastructure

on:
  pull_request_review:
    types: [submitted]
  workflow_dispatch:

defaults:
  run:
    working-directory: ./scripts

env:
  PR_NUMBER: ${{ github.event.pull_request.number }}
  PLAN_WORKFLOW_NAME: testing-plan-aws-infra.yaml
  TF_CACHE_DIR: ${{ github.workspace }}/.terraform.d/plugin-cache

jobs:
  apply-test-aws-k8s-infra:
    if: github.event.review.state == 'approved'
    runs-on: ubuntu-latest
    environment: testing
    steps:
      - uses: actions/checkout@v2

      - name: Init AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.0.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ vars.TF_VAR_REGION }}

      - name: Set up Tofu
        uses: opentofu/setup-opentofu@v1.0.1

      - name: Create Terraform Plugin Cache Dir
        run: mkdir --parents ${{ env.TF_CACHE_DIR }}

      - name: Cache OpenTofu plugins
        uses: actions/cache@v2
        id: cache_opentofu_plugins
        with:
          path: ${{ env.TF_CACHE_DIR }}
          key: tofu-${{hashFiles('./tofu/.terraform.lock.hcl')}}

      - name: Init infrastructure
        if: steps.cache_opentofu_plugins.outputs.cache-hit != 'true'
        run: ./tofu_init.sh

      - name: Get artifacts
        uses: dawidd6/action-download-artifact@v3
        with:
          workflow: ${{ env.PLAN_WORKFLOW_NAME }}
          pr: ${{ env.PR_NUMBER }}
          name: artifacts-${{ env.PR_NUMBER }}
          path: artifacts

      - name: Copy artifacts
        working-directory: ./artifacts
        run: |
          cp plan-aws.out ../tofu/plan-aws
          cp plan-k8s.out ../tofu/plan-k8s
          cp terraform.tfvars ../tofu/terraform.tfvars

      - name: Apply infrastructure
        id: apply_infrastructure
        run: ./tofu_apply_aws.sh plan-aws -- -auto-approve
        timeout-minutes: 20
        continue-on-error: true

      - name: Archive AWS target state
        uses: actions/upload-artifact@v4
        with:
          name: state-aws-${{ env.PR_NUMBER }}
          path: state/state-aws
          if-no-files-found: error

      - name: Get EKS cluster credentials
        id: get_eks_credentials
        if: steps.apply_infrastructure.outcome == 'success'
        continue-on-error: true
        run: |
          ./aws_update_kubeconfig.sh testing-cluster-${{ env.PR_NUMBER }} ${{ secrets.TF_VAR_ASSUME_ROLE_ARN }}

      - name: Check connection to EKS cluster
        if: steps.get_eks_credentials.outcome == 'success'
        continue-on-error: true
        run: |
          kubectl get nodes

      - name: Plan K8S module
        if: steps.get_eks_credentials.outcome == 'success'
        id: plan_k8s
        env:
          TF_VAR_falkordb_password: ${{ secrets.TF_VAR_FALKORDB_PASSWORD }}
        run: |
          ./tofu_plan_k8s.sh

      - name: Apply k8s module
        if: steps.plan_k8s.outcome == 'success'
        id: apply_k8s_module
        run: ./tofu_apply_k8s.sh plan-k8s -- -auto-approve
        timeout-minutes: 20
        continue-on-error: true

      - name: Archive K8S target state
        if: steps.apply_k8s_module.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: state-k8s-${{ env.PR_NUMBER }}
          path: state/state-k8s
          if-no-files-found: error

      - name: Get FalkorDB endpoint
        if: steps.apply_k8s_module.outcome == 'success'
        continue-on-error: true
        id: lb
        run: |
          echo "host=$(kubectl get svc -n falkordb falkordb-redis -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')" >> $GITHUB_ENV

      - name: Run python tests
        id: python_tests
        if: steps.apply_k8s_module.outcome == 'success'
        working-directory: .
        continue-on-error: true
        run: |
          FALKORDB_HOST=${{ steps.lb.outputs.host }}
          FALKORDB_PORT=6379
          FALKORDB_PASSWORD=${{ secrets.TF_VAR_FALKORDB_PASSWORD }}
          python3 -m venv .venv
          source .venv/bin/activate
          pip install -r requirements.txt
          pytest

      - name: Destroy infrastructure
        if: always()
        working-directory: ./tofu
        run: tofu destroy -auto-approve

      - name: Fail if tests did not pass
        if: always()
        run: |
          # Check if python tests conclusion is success
          if [ ${{ steps.python_tests.conclusion }} != 'success' ]; then
            exit 1
          fi
