name: TESTING Apply AWS infrastructure

on:
  # pull_request_review:
    # types: [submitted]
  workflow_dispatch:
    inputs:
      pr_number:
        description: "Pull request number"
        required: true

defaults:
  run:
    working-directory: ./scripts

env:
  PR_NUMBER: ${{github.event.pull_request.number }}
  PLAN_WORKFLOW_NAME: testing-plan-aws-infra.yaml
  # TF_CACHE_DIR: ${{ github.workspace }}/tofu/.terraform

jobs:
  apply-test-aws-k8s-infra:
    if: github.event.review.state == 'approved' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: testing
    steps:
      - uses: actions/checkout@v4

      - name: Set PR_NUMBER env variable
        if: github.event_name == 'workflow_dispatch'
        run: |
          # If event is workflow_dispatch, use the event.workflow_dispatch.inputs.pr_number
          echo "PR_NUMBER=${{ github.event.inputs.pr_number }}" >> $GITHUB_ENV

      - name: Init AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ vars.TF_VAR_REGION }}

      - name: Set up Tofu
        uses: opentofu/setup-opentofu@v1.0.4
        with:
          tofu_wrapper: false

      # - name: Create Terraform Plugin Cache Dir
      #   run: mkdir --parents ${{ env.TF_CACHE_DIR }}

      # - name: Cache OpenTofu plugins
      #   uses: actions/cache@v2
      #   id: cache_opentofu_plugins
      #   with:
      #     path: ${{ env.TF_CACHE_DIR }}
      #     key: tofu-${{hashFiles('./tofu/.terraform.lock.hcl')}}

      - name: Get artifacts
        uses: dawidd6/action-download-artifact@v3
        with:
          workflow: ${{ env.PLAN_WORKFLOW_NAME }}
          pr: ${{ env.PR_NUMBER }}
          workflow_conclusion: success
          name: artifacts-${{ env.PR_NUMBER }}
          path: artifacts

      - name: Copy artifacts
        working-directory: ./artifacts
        run: |
          cp plan-aws.out ../tofu/aws/plan-aws
          cp terraform.tfvars ../tofu/terraform.tfvars

      - name: Apply AWS infrastructure
        id: apply_infrastructure
        timeout-minutes: 20
        continue-on-error: true
        working-directory: ./tofu/aws
        run: |
          tofu init
          tofu apply -auto-approve -state-out ../../state/state-aws plan-aws
      
      - name: Set AWS infra output variables
        continue-on-error: true
        working-directory: ./tofu/aws
        run: |
          echo "TF_VAR_falkordb_eks_cluster_name=$(tofu output -state=../../state/state-aws -raw falkordb_eks_cluster_name)" >> $GITHUB_ENV
          echo "TF_VAR_falkordb_s3_backup_name=$(tofu output -state=../../state/state-aws -raw falkordb_s3_backup_name)" >> $GITHUB_ENV
          echo "TF_VAR_falkordb_eks_cluster_oidc_issuer_url=$(tofu output -state=../../state/state-aws -raw falkordb_eks_cluster_oidc_issuer_url)" >> $GITHUB_ENV
          echo "TF_VAR_falkordb_eks_cluster_oidc_issuer_arn=$(tofu output -state=../../state/state-aws -raw falkordb_eks_cluster_oidc_issuer_arn)" >> $GITHUB_ENV
          echo "TF_VAR_falkordb_eks_cluster_role_arn=$(tofu output -state=../../state/state-aws -raw falkordb_eks_cluster_role_arn)" >> $GITHUB_ENV
          echo "TF_VAR_falkordb_eks_cluster_endpoint=$(tofu output -state=../../state/state-aws -raw falkordb_eks_cluster_endpoint)" >> $GITHUB_ENV
          echo "TF_VAR_falkordb_eks_cluster_certificate_autority=$(tofu output -state=../../state/state-aws -raw falkordb_eks_cluster_certificate_autority)" >> $GITHUB_ENV

      - name: Archive AWS target state
        uses: actions/upload-artifact@v4
        with:
          name: state-aws-${{ env.PR_NUMBER }}
          path: state/state-aws
          if-no-files-found: error

      - name: Get EKS cluster credentials
        id: get_eks_credentials
        if: steps.apply_infrastructure.outcome == 'success'
        continue-on-error: true
        run: |
          ./aws_update_kubeconfig.sh testing-cluster-${{ env.PR_NUMBER }} ${{ secrets.TF_VAR_ASSUME_ROLE_ARN }}

      - name: Check connection to EKS cluster
        if: steps.get_eks_credentials.outcome == 'success'
        continue-on-error: true
        run: |
          kubectl get nodes

      - name: Apply k8s module
        if: steps.get_eks_credentials.outcome == 'success'
        id: apply_k8s_module
        timeout-minutes: 20
        continue-on-error: true
        working-directory: ./tofu/k8s
        run: |
          tofu init
          tofu plan -out=local-k8s -var-file=../terraform.tfvars -var "assume_role_arn=${{ secrets.TF_VAR_ASSUME_ROLE_ARN }}" -var "falkordb_password=${{ secrets.TF_VAR_FALKORDB_PASSWORD }}"
          tofu apply -auto-approve -state-out ../../state/state-k8s local-k8s

      - name: Archive K8S target state
        uses: actions/upload-artifact@v4
        with:
          name: state-k8s-${{ env.PR_NUMBER }}
          path: state/state-k8s
          if-no-files-found: error

      - name: Get FalkorDB endpoint
        if: steps.apply_k8s_module.outcome == 'success'
        continue-on-error: true
        id: lb
        run: |
          FALKORDB_HOST=$(kubectl get svc -n falkordb falkordb-redis -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          # If FALKORDB_HOST is empty, wait 30 seconds and try again
          if [ -z "$FALKORDB_HOST" ]; then
            sleep 30
            FALKORDB_HOST=$(kubectl get svc -n falkordb falkordb-redis -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          fi
          
          # If FALKORDB_HOST is still empty, exit with error
          if [ -z "$FALKORDB_HOST" ]; then
            echo "FALKORDB_HOST is empty"
            echo "$(kubectl get svc -n falkordb falkordb-redis -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')"
            exit 1
          fi

          echo "FALKORDB_HOST=$FALKORDB_HOST" >> $GITHUB_ENV
          echo "FALKORDB_PORT=6379" >> $GITHUB_ENV
          echo "FALKORDB_PASSWORD=${{ secrets.TF_VAR_FALKORDB_PASSWORD }}" >> $GITHUB_ENV

      - name: Run python tests
        id: python_tests
        if: steps.lb.outcome == 'success'
        working-directory: .
        continue-on-error: true
        run: |
          python3 -m venv .venv
          source .venv/bin/activate
          pip install -r requirements.txt
          pytest

      - name: Destroy K8S infrastructure
        if: always()
        working-directory: ./tofu/k8s
        run: tofu destroy -auto-approve -state ../../state/state-k8s  -var-file=../terraform.tfvars -var "assume_role_arn=${{ secrets.TF_VAR_ASSUME_ROLE_ARN }}" -var "falkordb_password=${{ secrets.TF_VAR_FALKORDB_PASSWORD }}"

      - name: Destroy AWS infrastructure
        if: always()
        working-directory: ./tofu/aws
        run: tofu destroy -auto-approve -state ../../state/state-aws  -var-file=../terraform.tfvars -var "assume_role_arn=${{ secrets.TF_VAR_ASSUME_ROLE_ARN }}" -var "eks_auth_role=${{ secrets.TF_VAR_EKS_AUTH_ROLE }}"

      - name: Fail if tests did not pass
        if: always()
        run: |
          # Check if python tests conclusion is success
          if [ ${{ steps.python_tests.outcome }} != 'success' ]; then
            exit 1
          fi
