apiVersion: v1
kind: Service
metadata:
  name: auth-proxy-nginx
  namespace: customer-observability
spec:
  selector:
    app.kubernetes.io/name: nginx
  ports:
    - port: 80
      targetPort: 3000
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-proxy-nginx
  namespace: customer-observability
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: nginx
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nginx
    spec:
      containers:
        - name: nginx
          image: bitnami/nginx:1.21.1
          ports:
            - containerPort: 3000
          volumeMounts:
            - name: nginx-config
              mountPath: /opt/bitnami/nginx/conf/
              readOnly: true
          resources:
            requests:
              memory: "128Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
      volumes:
        - name: nginx-config
          configMap:
            name: nginx-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: customer-observability
data:
  nginx.conf: |-
    server {
      listen 3000;
      server_name grafana.dev.falkordb.cloud;

      location = /grafana/login {
        proxy_pass http://customer-grafana-service.customer-observability.svc.cluster.local/login;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        break;
      }

      location /grafana/public {
        proxy_pass http://customer-grafana-service.customer-observability.svc.cluster.local/public;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        break;
      }

      location /grafana/api {
        proxy_pass http://customer-grafana-service.customer-observability.svc.cluster.local/api;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        break;
      }
        
      location /grafana/ {
        auth_request /auth;

        # Capture headers from the auth subrequest
        auth_request_set $user $upstream_http_x_webauth_user;

        # Forward captured headers to Grafana
        proxy_set_header X-WEBAUTH-USER $user;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;

        error_page 401 = @error401;

        proxy_pass http://customer-grafana-service.customer-observability.svc.cluster.local/;
      }

      location /auth {
        internal;
        proxy_pass http://auth-proxy.customer-observability.svc.cluster.local/api/verify;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URI $request_uri;
      }

      location @error401 {
        return 302 /signin;
      }

      location /_next/webpack-hmr {
        proxy_pass http://auth-proxy.customer-observability.svc.cluster.local;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
      }

      location / {
        proxy_pass http://auth-proxy.customer-observability.svc.cluster.local/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
      }
    }
