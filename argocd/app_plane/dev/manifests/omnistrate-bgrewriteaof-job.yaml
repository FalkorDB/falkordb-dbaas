---
# Kubernetes CronJob for executing bgrewriteaof on FalkorDB instance-* namespaces
# This CronJob scans for namespaces matching the pattern "instance-*" and creates
# individual Jobs to perform background AOF rewriting on FalkorDB node pods.

apiVersion: v1
kind: Namespace
metadata:
  name: bgrewriteaof-job
  labels:
    app: bgrewriteaof-job

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: bgrewriteaof-scanner-script
  namespace: bgrewriteaof-job
data:
  namespace-scanner.sh: |
    #!/bin/bash
    set -e

    # Configuration
    NAMESPACE_PATTERN="${NAMESPACE_PATTERN:-instance-}"
    MAX_CONCURRENT_JOBS="${MAX_CONCURRENT_JOBS:-5}"

    echo "Starting namespace scan for ${NAMESPACE_PATTERN}* pattern..."

    # Get all namespaces matching the pattern
    INSTANCE_NAMESPACES=$(kubectl get namespaces -o name | grep "namespace/${NAMESPACE_PATTERN}" | sed 's/namespace\///')

    if [ -z "$INSTANCE_NAMESPACES" ]; then
      echo "No namespaces found matching '${NAMESPACE_PATTERN}*' pattern"
      exit 0
    fi

    echo "Found namespaces: $INSTANCE_NAMESPACES"

    # Count current running jobs to avoid overwhelming the cluster
    CURRENT_JOBS=$(kubectl get jobs -l app=bgrewriteaof-job --field-selector status.successful!=1 -o name | wc -l)

    if [ "$CURRENT_JOBS" -ge "$MAX_CONCURRENT_JOBS" ]; then
      echo "Maximum concurrent jobs ($MAX_CONCURRENT_JOBS) reached. Skipping this run."
      exit 0
    fi

    # For each instance namespace, create a job
    for namespace in $INSTANCE_NAMESPACES; do

      # Get all pods in the namespace
      PODS=$(kubectl get pods -n $namespace -o json 2>/dev/null || echo '{"items":[]}')
      
      if [ "$PODS" = '{"items":[]}' ]; then
        echo "No pods found in namespace $namespace"
        continue
      fi
      
      # Filter pods with RUN_NODE=1
      NODE_PODS=$(echo "$PODS" | jq -r '.items[] | select(
        ([.spec.containers[]?.env[]? | select(.name == "RUN_NODE" and .value == "1")] | length > 0)
      ) | .metadata.name' | sort | uniq)
      
      if [ -z "$NODE_PODS" ]; then
        echo "No FalkorDB node pods found in namespace $namespace"
        continue
      fi

      echo "Creating bgrewriteaof job for namespace: $namespace"
      
      # Generate unique job name
      JOB_NAME="bgrewriteaof-$namespace-$(date +%s)"
      
      # Create the job manifest
      cat <<EOF | kubectl apply -f -
    apiVersion: batch/v1
    kind: Job
    metadata:
      name: $JOB_NAME
      namespace: bgrewriteaof-job
      labels:
        app: bgrewriteaof-job
        target-namespace: $namespace
        created-by: bgrewriteaof-cronjob
    spec:
      ttlSecondsAfterFinished: 300
      template:
        spec:
          serviceAccountName: instance-kubectl-exec-sa
          restartPolicy: Never
          containers:
          - name: bgrewriteaof-executor
            image: bitnami/kubectl:latest
            securityContext:
              runAsNonRoot: true
              runAsUser: 1000
              allowPrivilegeEscalation: false
            env:
            - name: TARGET_NAMESPACE
              value: "$namespace"
            volumeMounts:
            - name: bgrewriteaof-script
              mountPath: /scripts
            command:
            - /bin/bash
            - /scripts/bgrewriteaof.sh
          volumes:
          - name: bgrewriteaof-script
            configMap:
              name: bgrewriteaof-execution-script
              defaultMode: 0755
    EOF
      
      echo "Job $JOB_NAME created successfully"
    done

    echo "All bgrewriteaof jobs created successfully"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: bgrewriteaof-execution-script
  namespace: bgrewriteaof-job
data:
  bgrewriteaof.sh: |
    #!/bin/bash
    set -e

    echo "Starting bgrewriteaof execution for namespace: $TARGET_NAMESPACE"

    # Get all pods in the namespace
    PODS=$(kubectl get pods -n $TARGET_NAMESPACE -o json 2>/dev/null || echo '{"items":[]}')

    if [ "$PODS" = '{"items":[]}' ]; then
      echo "No pods found in namespace $TARGET_NAMESPACE"
      exit 0
    fi

    # Filter pods with RUN_NODE=1
    NODE_PODS=$(echo "$PODS" | jq -r '.items[] | select(
      ([.spec.containers[]?.env[]? | select(.name == "RUN_NODE" and .value == "1")] | length > 0)
    ) | .metadata.name' | sort | uniq)

    if [ -z "$NODE_PODS" ]; then
      echo "No FalkorDB node pods found in namespace $TARGET_NAMESPACE"
      exit 0
    fi

    echo "Found FalkorDB node pods in $TARGET_NAMESPACE: $NODE_PODS"

    # Execute bgrewriteaof on each qualifying pod
    for POD_NAME in $NODE_PODS; do
      echo "Processing bgrewriteaof for pod: $POD_NAME"
      
      # Check if pod is ready
      POD_STATUS=$(kubectl get pod -n $TARGET_NAMESPACE $POD_NAME -o jsonpath='{.status.phase}')
      if [ "$POD_STATUS" != "Running" ]; then
        echo "Pod $POD_NAME is not running (status: $POD_STATUS), skipping..."
        continue
      fi
      
      # Check if the run_bgrewriteaof script exists
      echo "Checking if run_bgrewriteaof exists in /var/lib/falkordb directory of pod $POD_NAME"
      if kubectl exec -n $TARGET_NAMESPACE $POD_NAME -c service -- test -f /var/lib/falkordb/run_bgrewriteaof; then
        echo "Executing bgrewriteaof script on pod: $POD_NAME"
        kubectl exec -n $TARGET_NAMESPACE $POD_NAME -c service -- /var/lib/falkordb/run_bgrewriteaof || echo "Bgrewriteaof execution failed in $POD_NAME"
        echo "Bgrewriteaof execution completed for pod: $POD_NAME"
      else
        echo "Warning: run_bgrewriteaof not found in /var/lib/falkordb directory of pod $POD_NAME, skipping..."
      fi
    done

    echo "Bgrewriteaof execution process completed for namespace $TARGET_NAMESPACE"

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: instance-kubectl-exec-sa
  namespace: bgrewriteaof-job
  labels:
    app: instance-kubectl-exec

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: bgrewriteaof-kubectl-exec-role
  labels:
    app: bgrewriteaof-kubectl-exec
rules:
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["list", "get"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["list", "get"]
  - apiGroups: [""]
    resources: ["pods/exec"]
    verbs: ["create"]
  - apiGroups: ["batch"]
    resources: ["jobs"]
    verbs: ["create", "get", "list", "delete"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: bgrewriteaof-kubectl-exec-binding
  labels:
    app: bgrewriteaof-kubectl-exec
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: bgrewriteaof-kubectl-exec-role
subjects:
  - kind: ServiceAccount
    name: instance-kubectl-exec-sa
    namespace: bgrewriteaof-job

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: bgrewriteaof-cronjob
  namespace: bgrewriteaof-job
  labels:
    app: bgrewriteaof
spec:
  # Run daily at 2 AM for bgrewriteaof
  schedule: "*/15 * * * *"
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 3
  successfulJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: bgrewriteaof-scanner
        spec:
          serviceAccountName: instance-kubectl-exec-sa
          restartPolicy: OnFailure
          containers:
            - name: namespace-scanner
              image: bitnami/kubectl:latest
              securityContext:
                runAsNonRoot: true
                runAsUser: 1000
                allowPrivilegeEscalation: false
              resources:
                requests:
                  memory: "64Mi"
                  cpu: "50m"
                limits:
                  memory: "128Mi"
                  cpu: "100m"
              env:
                - name: NAMESPACE_PATTERN
                  value: "instance-"
                - name: MAX_CONCURRENT_JOBS
                  value: "5"
              volumeMounts:
                - name: scanner-script
                  mountPath: /scripts
              command:
                - /bin/bash
                - /scripts/namespace-scanner.sh
          volumes:
            - name: scanner-script
              configMap:
                name: bgrewriteaof-scanner-script
                defaultMode: 0755
