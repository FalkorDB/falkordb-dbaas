# Observability Stack - Application plane

Defines the resources that will be deployed in each application cluster to monitor its contents.

The application plane for the observability stack is composed of the following components:

- VictoriaMetrics: Store metrics
  - Alertmanager
- Grafana Alloy: Scrape metrics from applications, and write them to the control plane
- Pod Monitor: Scrape metrics from pods
- Private Service Connect: Send metrics to the control plane

## Adding clusters to be monitored

### GCP Clusters

Steps:

0. Set the following environment variables:
```bash
# ArgoCD Server
export ARGOCD_SERVER=
# App plane Project ID
export PROJECT=
# GCP Region
export REGION=
# GCP App Plane Cluster Name
export CLUSTER=
# App plane Cluster Context name
export APP_PLANE_CTX=
# PagerDuty API Key
export PAGERDUTY_API_KEY=
# Control Plane Context name
export CTRL_PLANE_CTX=
```

1. Create the node pool for the desired cluster

```bash
gcloud container node-pools create observability \
    --cluster=$CLUSTER \
    --region=$REGION \
    --machine-type=e2-standard-2 \
    --disk-size=50 \
    --enable-autoscaling \
    --max-nodes=10 \
    --project=$PROJECT \
    --node-labels=node_pool=observability
```

2. Set the current context to the desired cluster
```bash
gcloud container clusters get-credentials $CLUSTER --region=$REGION --project=$PROJECT
```

3. Create the PagerDuty secret in the cluster
```bash
kubectl create secret generic pagerduty-service-key \
    --from-literal=api-key=$PAGERDUTY_API_KEY \
    --namespace=observability
```

4. Add the cluster credentials to the observability cluster in the control plane
```bash
argocd cluster add $CONTEXT --server ARGOCD_SERVER --label role=app-plane,cloud_provider=gcp
```

5. Wait for the cluster to be added to the control plane and the resources to be deployed. 
```
kubectl get secret $CLUSTER-vmuser -n observability -w --context $CTRL_PLANE_CTX
```

6. Once the vmuser secret is created, create a new secret on the app plane for the vmuser:
```bash
kubectl create secret generic vmuser \
    --from-literal=password=$(kubectl get secret $CLUSTER-vmuser -n observability -o jsonpath="{.data.password}" --context $CTRL_PLANE_CTX | base64 --decode) \
    --namespace=observability
```


### AWS Clusters

Steps:
0. Set the following environment variables:
```bash
# ArgoCD Server
export ARGOCD_SERVER=
# AWS App Plane Cluster Name
export CLUSTER=
# App plane Cluster Context name
export APP_PLANE_CTX=
# AWS Node Role
export NODE_ROLE=
# AWS Subnets
export SUBNETS=
# PagerDuty API Key
export PAGERDUTY_API_KEY=
# Control Plane Context name
export CTRL_PLANE_CTX=
```

1. Create the node pool for the desired cluster
```bash
aws eks create-nodegroup \
    --cluster-name $CLUSTER \
    --nodegroup-name observability \
    --node-role $NODE_ROLE \
    --subnets $SUBNETS \
    --instance-types m5.large \
    --disk-size 50 \
    --scaling-config minSize=1,maxSize=10,desiredSize=1 \
    --labels node_pool=observability
```

2. Set the current context to the desired cluster
```bash
aws eks update-kubeconfig --name $CLUSTER --region $REGION
```

3. Create the PagerDuty secret in the cluster
```bash
kubectl create secret generic pagerduty-service-key \
    --from-literal=api-key=$PAGERDUTY_API_KEY
    --namespace=observability
```

4. Add the cluster credentials to the observability cluster in the control plane
```bash
argocd cluster add $CONTEXT --server ARGOCD_SERVER --label role=app-plane,cloud_provider=aws
```

5. Wait for the cluster to be added to the control plane and the resources to be deployed. 
```
kubectl get secret $CLUSTER-vmuser -n observability -w --context $CTRL_PLANE_CTX
```

6. Once the vmuser secret is created, create a new secret on the app plane for the vmuser:
```bash
kubectl create secret generic vmuser \
    --from-literal=password=$(kubectl get secret $CLUSTER-vmuser -n observability -o jsonpath="{.data.password}" --context $CTRL_PLANE_CTX | base64 --decode) \
    --namespace=observability
```
