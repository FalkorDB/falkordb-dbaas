apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: victoriametrics
  namespace: argocd
spec:
  goTemplate: true
  goTemplateOptions: ["missingkey=error"]
  generators:
    - clusters:
        selector:
          matchLabels:
            argocd.argoproj.io/secret-type: cluster
  template:
    metadata:
      name: '{{substr 0 40 .name | replace "_" "-"}}-victoriametrics'
    spec:
      project: default
      source:
        chart: victoria-metrics-k8s-stack
        repoURL: https://victoriametrics.github.io/helm-charts
        targetRevision: 0.33.4
        helm:
          releaseName: vm
          valuesObject:
            defaultDashboards:
              enabled: true
              annotations:
                argocd.argoproj.io/sync-options: ServerSideApply=true
              # grafanaOperator:
              #   enabled: true
              #   spec:
              #     instanceSelector:
              #       matchLabels:
              #         dashboards: grafana
              # dashboards:
              #   victoriametrics-vmalert:
              #     enabled: true
              #   victoriametrics-operator:
              #     enabled: true
              #   node-exporter-full:
              #     enabled: false
            defaultRules:
              create: true
              groups:
                etcd:
                  create: true
                  rules: {}
                general:
                  create: true
                  rules: {}
                k8sContainerCpuLimits:
                  create: true
                  rules: {}
                k8sContainerCpuRequests:
                  create: true
                  rules: {}
                k8sContainerCpuUsageSecondsTotal:
                  create: true
                  rules: {}
                k8sContainerMemoryLimits:
                  create: true
                  rules: {}
                k8sContainerMemoryRequests:
                  create: true
                  rules: {}
                k8sContainerMemoryRss:
                  create: true
                  rules: {}
                k8sContainerMemoryCache:
                  create: true
                  rules: {}
                k8sContainerMemoryWorkingSetBytes:
                  create: true
                  rules: {}
                k8sContainerMemorySwap:
                  create: true
                  rules: {}
                k8sPodOwner:
                  create: true
                  rules: {}
                k8sContainerResource:
                  create: true
                  rules: {}
                kubeApiserver:
                  create: false
                  rules: {}
                kubeApiserverAvailability:
                  create: false
                  rules: {}
                kubeApiserverBurnrate:
                  create: false
                  rules: {}
                kubeApiserverHistogram:
                  create: false
                  rules: {}
                kubeApiserverSlos:
                  create: false
                  rules: {}
                kubelet:
                  create: false
                  rules: {}
                kubePrometheusGeneral:
                  create: false
                  rules: {}
                kubePrometheusNodeRecording:
                  create: false
                  rules: {}
                kubernetesApps:
                  create: true
                  rules: {}
                  targetNamespace: ".*"
                kubernetesResources:
                  create: true
                  rules: {}
                kubernetesStorage:
                  create: true
                  rules: {}
                  targetNamespace: ".*"
                kubernetesSystem:
                  create: true
                  rules: {}
                kubernetesSystemKubelet:
                  create: false
                  rules: {}
                kubernetesSystemApiserver:
                  create: false
                  rules: {}
                kubernetesSystemControllerManager:
                  create: false
                  rules: {}
                kubeScheduler:
                  create: false
                  rules: {}
                kubernetesSystemScheduler:
                  create: false
                  rules: {}
                kubeStateMetrics:
                  create: true
                  rules: {}
                nodeNetwork:
                  create: false
                  rules: {}
                node:
                  create: true
                  rules: {}
                vmagent:
                  create: false
                  rules: {}
                vmsingle:
                  create: true
                  rules: {}
                vmcluster:
                  create: false
                  rules: {}
                vmHealth:
                  create: true
                  rules: {}
                vmoperator:
                  create: true
                  rules: {}
                alertmanager:
                  create: true
                  rules: {}
            additionalVictoriaMetricsMap: {}
            vmsingle:
              spec:
                retentionPeriod: 3d
                logFormat: json
                nodeSelector:
                  node_pool: observability
            alertmanager:
              spec:
                nodeSelector:
                  node_pool: observability
                secrets:
                  - pagerduty-service-key
                configSecret: null #"vmalertmanager-vm-victoria-metrics-k8s-stack"
              config:
                global:
                  resolve_timeout: 5m
                route:
                  group_by: ["alertname", "namespace", "pod"]
                  group_wait: 30s
                  group_interval: 5m
                  repeat_interval: 12h
                  receiver: "pagerduty"
                  routes:
                    - match:
                        alertname: Watchdog
                      receiver: "blackhole"
                    - receiver: "pagerduty"
                receivers:
                  - name: blackhole
                  - name: "pagerduty"
                    pagerduty_configs:
                      - service_key_file: " /etc/vm/secrets/pagerduty-service-key/api-key"
                        url: https://events.pagerduty.com/generic/2010-04-15/create_event.json
                        send_resolved: true
            vmalert:
              spec:
                nodeSelector:
                  node_pool: observability
            vmagent:
              enabled: false
            grafana:
              enabled: true
            prometheus-node-exporter:
              enabled: false
            kube-state-metrics:
              enabled: false
            kubeScheduler:
              enabled: false
            kubelet:
              enabled: false
            kubeApiServer:
              enabled: false
            kubeControllerManager:
              enabled: false
            kubeDns:
              enabled: false
            coreDns:
              enabled: false
            kubeEtcd:
              enabled: false
            enabled:
              enabled: false
            kubeProxy:
              enabled: false
      destination:
        server: "{{.server}}"
        namespace: observability
      syncPolicy:
        syncOptions:
          - CreateNamespace=true
          - RespectIgnoreDifferences=true
        automated:
          prune: true
          selfHeal: true
      ignoreDifferences:
        - group: ""
          kind: Secret
          name: victoria-metrics-k8s-stack-vm-validation
          namespace: observability
          jsonPointers:
            - /data
        - group: admissionregistration.k8s.io
          kind: ValidatingWebhookConfiguration
          name: victoria-metrics-k8s-stack-vm-admission
          jqPathExpressions:
            - ".webhooks[]?.clientConfig.caBundle"
